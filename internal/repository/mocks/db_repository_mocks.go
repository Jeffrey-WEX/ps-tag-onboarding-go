// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "github.com/Jeffrey-WEX/ps-tag-onboarding-go/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: newUser
func (_m *IUserRepository) CreateUser(newUser *model.User) (*model.User, error) {
	ret := _m.Called(newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByFirstLastName provides a mock function with given fields: firstName, lastName
func (_m *IUserRepository) FindUserByFirstLastName(firstName string, lastName string) (model.User, error) {
	ret := _m.Called(firstName, lastName)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByFirstLastName")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.User, error)); ok {
		return rf(firstName, lastName)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = rf(firstName, lastName)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: userId
func (_m *IUserRepository) GetUserById(userId string) (*model.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
